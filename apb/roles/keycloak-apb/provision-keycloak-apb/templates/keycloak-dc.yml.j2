apiVersion: v1
kind: DeploymentConfig
metadata:
  labels:
    app: {{ application_name }}
    service: {{ application_name }}
  name: {{ application_name }}
  namespace: {{ namespace }}
spec:
  replicas: 1
  selector:
    app: {{ application_name }}
    service: {{ application_name }}
  strategy:
    activeDeadlineSeconds: 21600
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ application_name }}
        service: {{ application_name }}
    spec:
      containers:
        - args:
            - '-c'
            - >-
{% if use_self_signed_cert %}
              echo "Found a custom cert. Adding it to RH SSO trust store..." &&
              echo "${OPENSHIFT_IDENTITY_PROVIDER_CERTIFICATE}" > /home/jboss/openshift.crt &&
              keytool -importcert -alias HOSTDOMAIN -keystore /home/jboss/openshift.jks -file /home/jboss/openshift.crt -storepass openshift -noprompt &&
              keytool -importkeystore -srckeystore $JAVA_HOME/jre/lib/security/cacerts -destkeystore /home/jboss/openshift.jks -srcstorepass changeit -deststorepass openshift &&
              sed -i "/<\/theme>/a<spi name=\"truststore\">\n    <provider name=\"file\" enabled=\"true\">\n        <properties>\n            <property name=\"file\" value=\"/home/jboss/openshift.jks\"/>\n            <property name=\"password\" value=\"openshift\"/>\n            <property name=\"hostname-verification-policy\" value=\"ANY\"/>\n            <property name=\"disabled\" value=\"false\"/>\n        </properties>\n    </provider>\n</spi>" /opt/eap/standalone/configuration/standalone-openshift.xml &&
{% endif %}
              /opt/eap/bin/add-user-keycloak.sh -u {{ admin_username }} -p {{ admin_password }} &&
              /opt/eap/bin/openshift-launch.sh
          command:
            - /bin/sh
          env:
            - name: PROXY_ADDRESS_FORWARDING
              value: 'true'
            - name: OPENSHIFT_IDENTITY_PROVIDER_CERTIFICATE
              valueFrom:
                secretKeyRef:
                  key: ca.crt
                  name: self-signed-cert
                  optional: true
            - name: DB_SERVICE_PREFIX_MAPPING
              value: keycloak-postgresql=DB
            - name: KEYCLOAK_POSTGRESQL_SERVICE_HOST
              value: postgres
            - name: KEYCLOAK_POSTGRESQL_SERVICE_PORT
              value: '5432'
            - name: DB_USERNAME
              value_from:
                secret_key_ref:
                  name: {{ postgres_name }}
                  key: database-user
            - name: DB_PASSWORD
              value_from:
                secret_key_ref:
                  name: {{ postgres_name }}
                  key: database-password
            - name: DB_DATABASE
              value_from:
                secret_key_ref:
                  name: {{ postgres_name }}
                  key: database-name
          image: '{{ keycloak_image_name }}:{{ keycloak_image_tag }}'
          imagePullPolicy: Always
          readinessProbe:
            initialDelaySeconds: 40
            failureThreshold: 10
            httpGet:
              path: /
              port: web
          livenessProbe:
            initialDelaySeconds: 200
            httpGet:
              path: /
              port: web
          name: {{ application_name }}
          ports:
            - containerPort: 8080
              protocol: TCP
              name: web
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: auth/js/keycloak.js
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 1536Mi
            requests:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
  test: false
  triggers:
    - type: ConfigChange
