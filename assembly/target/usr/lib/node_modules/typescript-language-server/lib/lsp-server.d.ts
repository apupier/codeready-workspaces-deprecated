import * as lsp from 'vscode-languageserver';
import * as tsp from 'typescript/lib/protocol';
import { Logger } from './logger';
import { LspClient } from './lsp-client';
export interface IServerOptions {
    logger: Logger;
    tsserverPath?: string;
    tsserverLogFile?: string;
    tsserverLogVerbosity?: string;
    lspClient: LspClient;
}
export declare const WORKSPACE_EDIT_COMMAND = "workspace-edit";
export declare class LspServer {
    private options;
    private initializeParams;
    private initializeResult;
    private tspClient;
    private openedDocumentUris;
    private diagnosticQueue;
    private logger;
    constructor(options: IServerOptions);
    closeAll(): void;
    protected findTsserverPath(): string;
    initialize(params: lsp.InitializeParams): Promise<lsp.InitializeResult>;
    requestDiagnostics(): Promise<tsp.RequestCompletedEvent>;
    didOpenTextDocument(params: lsp.DidOpenTextDocumentParams): void;
    didCloseTextDocument(params: lsp.DidOpenTextDocumentParams): void;
    didChangeTextDocument(params: lsp.DidChangeTextDocumentParams): void;
    didSaveTextDocument(params: lsp.DidChangeTextDocumentParams): void;
    definition(params: lsp.TextDocumentPositionParams): Promise<lsp.Definition>;
    documentSymbol(params: lsp.TextDocumentPositionParams): Promise<lsp.SymbolInformation[]>;
    completion(params: lsp.TextDocumentPositionParams): Promise<lsp.CompletionList>;
    completionResolve(item: lsp.CompletionItem): Promise<lsp.CompletionItem>;
    hover(params: lsp.TextDocumentPositionParams): Promise<lsp.Hover>;
    rename(params: lsp.RenameParams): Promise<lsp.WorkspaceEdit>;
    references(params: lsp.TextDocumentPositionParams): Promise<lsp.Location[]>;
    documentFormatting(params: lsp.DocumentFormattingParams): Promise<lsp.TextEdit[]>;
    signatureHelp(params: lsp.TextDocumentPositionParams): Promise<lsp.SignatureHelp>;
    codeAction(arg: lsp.CodeActionParams): Promise<lsp.Command[]>;
    executeCommand(arg: lsp.ExecuteCommandParams): void;
    documentHighlight(arg: lsp.TextDocumentPositionParams): Promise<lsp.DocumentHighlight[]>;
    private rootPath();
    private lastFileOrDummy();
    workspaceSymbol(params: lsp.WorkspaceSymbolParams): Promise<lsp.SymbolInformation[]>;
    protected onTsEvent(event: protocol.Event): void;
}
