import * as protocol from 'typescript/lib/protocol';
import { CommandTypes } from './tsp-command-types';
import { Logger } from './logger';
export interface TspClientOptions {
    logger: Logger;
    tsserverPath: string;
    logFile?: string;
    logVerbosity?: string;
    onEvent?: (event: protocol.Event) => void;
}
export declare class TspClient {
    private options;
    private readlineInterface;
    private tsserverProc;
    private seq;
    private buffer;
    private header;
    private deferreds;
    private logger;
    private tsserverLogger;
    constructor(options: TspClientOptions);
    start(): void;
    notify(command: CommandTypes.Open, args: protocol.OpenRequestArgs): any;
    notify(command: CommandTypes.Close, args: protocol.FileRequestArgs): any;
    notify(command: CommandTypes.Saveto, args: protocol.SavetoRequestArgs): any;
    notify(command: CommandTypes.Change, args: protocol.ChangeRequestArgs): any;
    request(command: CommandTypes.Configure, args: protocol.ConfigureRequestArguments): Promise<protocol.ConfigureResponse>;
    request(command: CommandTypes.Definition, args: protocol.FileLocationRequestArgs): Promise<protocol.DefinitionResponse>;
    request(command: CommandTypes.Format, args: protocol.FormatRequestArgs): Promise<protocol.FormatResponse>;
    request(command: CommandTypes.GetApplicableRefactors, args: protocol.CodeFixRequestArgs): Promise<protocol.GetCodeFixesResponse>;
    request(command: CommandTypes.GetCodeFixes, args: protocol.CodeFixRequestArgs): Promise<protocol.GetCodeFixesResponse>;
    request(command: CommandTypes.Geterr, args: protocol.GeterrRequestArgs): Promise<protocol.RequestCompletedEvent>;
    request(command: CommandTypes.GeterrForProject, args: protocol.GeterrForProjectRequestArgs): Promise<protocol.RequestCompletedEvent>;
    request(command: CommandTypes.Navto, args: protocol.NavtoRequestArgs): Promise<protocol.NavtoResponse>;
    request(command: CommandTypes.NavTree, args: protocol.FileRequestArgs): Promise<protocol.NavTreeResponse>;
    request(command: CommandTypes.Completions, args: protocol.CompletionsRequestArgs): Promise<protocol.CompletionsResponse>;
    request(command: CommandTypes.CompletionDetails, args: protocol.CompletionDetailsRequestArgs): Promise<protocol.CompletionDetailsResponse>;
    request(command: CommandTypes.DocumentHighlights, args: protocol.DocumentHighlightsRequestArgs): Promise<protocol.DocumentHighlightsResponse>;
    request(command: CommandTypes.Quickinfo, args: protocol.FileLocationRequestArgs): Promise<protocol.QuickInfoResponse>;
    request(command: CommandTypes.Rename, args: protocol.RenameRequestArgs): Promise<protocol.RenameResponse>;
    request(command: CommandTypes.References, args: protocol.FileLocationRequestArgs): Promise<protocol.ReferencesResponse>;
    request(command: CommandTypes.SignatureHelp, args: protocol.SignatureHelpRequestArgs): Promise<protocol.SignatureHelpResponse>;
    protected sendMessage(command: string, notification: boolean, args?: any): Promise<any> | undefined;
    protected processMessage(untrimmedMessageString: string): void;
    private resolveResponse(message, request_seq, success);
    private isEvent(message);
    private isResponse(message);
    private isRequestCompletedEvent(message);
}
