"use strict";
/*
 * Copyright (C) 2017, 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
const cp = require("child_process");
const readline = require("readline");
const decoder = require("string_decoder");
const logger_1 = require("./logger");
const utils_1 = require("./utils");
class TspClient {
    constructor(options) {
        this.options = options;
        this.seq = 0;
        this.buffer = '';
        this.deferreds = {};
        this.logger = new logger_1.PrefixingLogger(options.logger, '[tsclient]');
        this.tsserverLogger = new logger_1.PrefixingLogger(options.logger, '[tsserver]');
    }
    start() {
        if (this.readlineInterface) {
            return;
        }
        const args = [];
        if (this.options.logFile) {
            args.push('--logFile');
            args.push(this.options.logFile);
        }
        if (this.options.logVerbosity) {
            args.push('--logVerbosity');
            args.push(this.options.logVerbosity);
        }
        this.logger.info(`Starting tsserver : '${this.options.tsserverPath} ${args.join(' ')}'`);
        this.tsserverProc = cp.spawn(this.options.tsserverPath, args);
        this.readlineInterface = readline.createInterface(this.tsserverProc.stdout, this.tsserverProc.stdin, undefined);
        process.on('exit', () => {
            this.readlineInterface.close();
            this.tsserverProc.stdin.destroy();
            this.tsserverProc.kill();
        });
        this.readlineInterface.on('line', line => this.processMessage(line));
        const dec = new decoder.StringDecoder("utf-8");
        this.tsserverProc.stderr.addListener('data', data => {
            const stringMsg = typeof data === 'string' ? data : dec.write(data);
            this.tsserverLogger.error(stringMsg);
        });
    }
    notify(command, args) {
        this.logger.log("notify", command, args);
        this.sendMessage(command, true, args);
    }
    request(command, args) {
        this.logger.log("request", command, args);
        return this.sendMessage(command, false, args);
    }
    sendMessage(command, notification, args) {
        this.seq = this.seq + 1;
        let request = {
            command,
            seq: this.seq,
            type: 'request'
        };
        if (args) {
            request.arguments = args;
        }
        const serializedRequest = JSON.stringify(request) + "\n";
        this.tsserverProc.stdin.write(serializedRequest);
        if (notification) {
            return;
        }
        else {
            return (this.deferreds[this.seq] = new utils_1.Deferred(command)).promise;
        }
    }
    processMessage(untrimmedMessageString) {
        const messageString = untrimmedMessageString.trim();
        if (!messageString || messageString.startsWith('Content-Length:')) {
            return;
        }
        const message = JSON.parse(messageString);
        if (this.isResponse(message)) {
            this.resolveResponse(message, message.request_seq, message.success);
        }
        else if (this.isEvent(message)) {
            if (this.isRequestCompletedEvent(message)) {
                this.resolveResponse(message, message.body.request_seq, true);
            }
            else {
                if (this.options.onEvent) {
                    this.options.onEvent(message);
                }
            }
        }
    }
    resolveResponse(message, request_seq, success) {
        const deferred = this.deferreds[request_seq];
        this.logger.log('has deferred', !!deferred, message, Object.keys(this.deferreds));
        if (deferred) {
            if (success) {
                this.deferreds[request_seq].resolve(message);
            }
            else {
                this.deferreds[request_seq].reject(message);
            }
            delete this.deferreds[request_seq];
        }
    }
    isEvent(message) {
        return message.type === 'event';
    }
    isResponse(message) {
        return message.type === 'response';
    }
    isRequestCompletedEvent(message) {
        return this.isEvent(message) && message.event === 'requestCompleted';
    }
}
exports.TspClient = TspClient;
//# sourceMappingURL=tsp-client.js.map